@model Negotiation.Models.NegotiationViewModel
@{
    ViewBag.Title = "Negotiation";
    Layout = null;
}

<div style="width:100%; display:table">
    <div style="display:table-column"></div>
    <div id="yourScoreTable" style="display:table-column; width:300px; border-style:dashed; border-color:gray; visibility:collapse" ></div>
    <div id="partnerScoreTable" style="display:table-column; width:400px; border-style:dashed; border-color:gray; visibility:collapse" ></div>
    
    <div style="display:table-row">
        <div style="display:table-cell">
            <div style="border-style:solid; border-color:purple">
                <table>
                    <tr>
                        <td>
                            Your role: @Model.HumanConfig.Side
                        </td>
                        <td>
                            @Html.Partial("NegotiationTimerView",@Model.RemainingTime)
                        </td>
                        <td>
                            <button onclick="toggleTableId('yourScoreTable')">
                                Your scores
                            </button>
                        </td>
                        <td>
                            <button onclick="toggleTableId('partnerScoreTable')">
                                Partner's scores
                            </button>
                        </td>
                    </tr>
                </table>
            </div>
            <div style="border-style:solid; border-color:blue">
                Use the menuts below to select your offer <br />
                <ul>
                    <li>
                        You play the role of the <b>@Model.HumanConfig.Side</b>.
                    </li>
                    <li>
                        The negotiation relates to several <b>issues</b>. For each issue, there are several possible <b>values</b>.
                    </li>
                    <li>
                        Your score depends on the <b>values</b> in the final agreement, and on <b>time</b>. Click "Your scores" for details.
                    </li>
                    <li>
                        Use the menus below as a draft. Your partner cannot see them - you communicate with the buttons below ("send offer", "accept", and "reject").
                    </li>
                    <li>
                        To sign on an agreement, you MUST click the same values as your partner. <b>As you click on the same one, it turns green</b>. (Note that "Sign the agreement" is greyed out).
                    </li>
                    <li>
                        This draft is <b>not binding</b> until both of you sign it.
                    </li>
                </ul>
                <table>
                    <tr>
                        <th>
                            Your Offer:
                        </th>
                        <th>
                            Opponent Offer:
                        </th>
                    </tr>
                    <tr>
                        <td valign="top">
                            @using (Ajax.BeginForm("SendOffer", new AjaxOptions() { HttpMethod = "Post",UpdateTargetId="bogus"}))
                            {
                                @Html.Hidden("negotiationId", Model.Id)
                                <table>
                                    <tr>
                                        <td>
                                            <b>Issue:</b>
                                        </td>
                                        <td>
                                            <b>Options:</b>
                                        </td>
                                    </tr>
                                    @foreach (var topic in Model.Domain.OwnerVariantDict[Model.HumanConfig.Side][Model.HumanConfig.Variant].Topics)
                                    {
                                        <tr>
                                            <td>
                                                @(topic.Key + ":")
                                            </td>
                                            <td>
                                                @Html.DropDownList("offer.Offers[" + topic.Key + "].TopicValue",
                                                topic.Value.Options.Values.Select(x => new SelectListItem { Text = x.Name, Value = x.Name }),
                                             new { id = "Offer_" + topic.Key, data_id = "Offer", onchange = "recheckOffer()" })
                                            </td>
                                        </tr>
                                    }
                                    <tr>
                                        <td>
                                            <b>Your Score:</b>
                                        </td>
                                        <td>
                                            @(Model.Offer.Offers.Values.Sum(x => int.Parse(x.TopicValue)) + Model.Domain.RoundsPassed(Model.RemainingTime) * Model.Domain.OwnerVariantDict[Model.HumanConfig.Side][Model.HumanConfig.Variant].TimeEffect)
                                        </td>
                                    </tr>
                                </table>
                                <button onclick="sendOffer()">Send Offer</button> 
                            }
                            or reply to recent partner's offer: <button>Accept</button>  <button>Reject</button><br />
                        </td>
                        <td valign="top">
                            <div id="opponentOffer">
                                <table>
                                    <tr>
                                        <td>
                                            <b>Issue:</b>
                                        </td>
                                    </tr>
                                    @foreach (var topic in Model.Domain.OwnerVariantDict[Model.HumanConfig.Side][Model.HumanConfig.Variant].Topics)
                                    {
                                        <tr>
                                            <td>
                                                @(topic.Key + ":")
                                            </td>
                                            <td id='opOffer_@(topic.Key)'>
                                                @{
                                        Negotiation.Models.NegotiationTopicOffer value;
                                        var x = Model.OpponentOffer.Offers.TryGetValue(topic.Key, out value);

                                        if (x)
                                        {
                                            @value
                                        }
                                        else
                                        {
                                            @:---
                                                }
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </td>

                    </tr>
                </table>
                <button>Sign the agreement</button>
            </div>
            @Html.Partial("_ActionHistoryView",Model.Actions)
            @using (Html.BeginForm("OptOut", "Negotiation", FormMethod.Post))
            {
                @Html.Hidden("NegotiationId", Model.Id)
                <div style="border-style:solid; border-color:black">
               
                    <b>Click here to quit the negotiation immediately: <button type="submit">Opt Out</button></b>
                
                </div>
            }
        </div>
        <div style="display:table-cell;">
            <button onclick="toggleTableId('yourScoreTable')">close:</button>
            Your score table:<br />
            @Html.Partial("NegotiationSideView", new List<Negotiation.Models.NegotiationSideDescription>() { Model.Domain.OwnerVariantDict[Model.HumanConfig.Side][Model.HumanConfig.Variant] })
        </div>
        <div style="display:table-cell;">
            <button onclick="toggleTableId('partnerScoreTable')">close:</button>
            Your partner score table:<br />
            @Html.Partial("NegotiationSideView", Model.Domain.OwnerVariantDict[Model.AiSide].Values)
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
<script type="text/javascript">
    toggleTableId = function (tableId) {
        var tab = document.getElementById(tableId);
        if (tab.style.visibility == "collapse") {
            tab.style.visibility = "visible";
        }
        else {
            tab.style.visibility = "collapse";
        }
    };

    @*sendOffer = function () {
        var data = {
            negotiationId : "@Model.Id",
            Offer : @Html.Raw(Json.Encode(Model.Offer))
            };
        $.ajax({ url: 'SendOffer', type: "POST", data: JSON.stringify(data), contentType: 'application/json' });
    }*@

    acceptOffer = function () {
        var data = {
            negotiationId : "@Model.Id"
            };
        $.ajax({ url: 'AcceptOffer', type: "POST", data: JSON.stringify(data), contentType: 'application/json' });
    }

    updateOpponentOffer = function() {
        var data = {
            negotiationId : "@Model.Id"
        };
        $.ajax({ url: 'UpdateOpponentOffer',
            type: "POST",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success : function(result) {
                $('#opponentOffer').html(result);
                recheckOffer();
            }
        });
    }

    window.setInterval(updateOpponentOffer, 2000);

    updateActionHistory = function() {
        var data = {
            negotiationId : "@Model.Id"
        };
        $.ajax({ url: 'UpdateActionHistory',
            type: "POST",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success : function(result) {
                $('#actionHistory').html(result);
            }
        });
    }

    window.setInterval(updateActionHistory, 2000);

    updateTimer = function() {
        var data = {
            negotiationId : "@Model.Id"
        };
        $.ajax({ url: 'UpdateTimer',
            type: "POST",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success : function(result) {
                $('#negotiationTimer').html(result);
            }
        });
    };

    window.setInterval(updateTimer, 500);

    recheckOffer = function () {
        $('[data-id="Offer"]').each(function(index,offer) {
            var offer_id = offer["id"];
            var op_offer = document.getElementById('op'+offer_id);

            if (offer.selectedIndex == -1 || offer.options[offer.selectedIndex].text != op_offer.text) {
                offer.style.backgroundColor = "Pink";
            }
            else {
                offer.style.backgroundColor = "LightGreen";
            }
        });
    };

    recheckOffer();
</script>






